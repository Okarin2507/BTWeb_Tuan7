
type Product {
    id: ID!
    title: String
    quantity: Int
    description: String
    price: Float
    user: User
    categories: [Category]
}

type Category {
    id: ID!
    name: String
    images: String
}

type User {
    id: ID!
    fullname: String
    email: String
    phone: String
    products: [Product]
}


input ProductInput {
    title: String!
    quantity: Int!
    description: String
    price: Float!
    userId: ID!
    categoryIds: [ID!]
}

input CategoryInput {
    name: String!
    images: String
}

input UserInput {
    fullname: String!
    email: String!
    password: String!
    phone: String
}


type Query {
    # Product Queries
    allProductsByPrice: [Product]
    productsByCategory(categoryId: ID!): [Product]
    productById(id: ID!): Product 

    # Category Queries
    allCategories: [Category]
    categoryById(id: ID!): Category

    # User Queries
    allUsers: [User]
    userById(id: ID!): User
}

type Mutation {
    # Product Mutations
    createProduct(productInput: ProductInput!): Product
    updateProduct(id: ID!, productInput: ProductInput!): Product
    deleteProduct(id: ID!): Boolean

    # Category Mutations
    createCategory(categoryInput: CategoryInput!): Category
    updateCategory(id: ID!, categoryInput: CategoryInput!): Category
    deleteCategory(id: ID!): Boolean

    # User Mutations
    createUser(userInput: UserInput!): User
    updateUser(id: ID!, userInput: UserInput!): User
    deleteUser(id: ID!): Boolean
}